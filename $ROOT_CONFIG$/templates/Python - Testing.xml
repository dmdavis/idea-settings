<templateSet group="Python - Testing">
  <template name="ac" value="self.assertTrue($mock$.$method$.called)" description="self.assertTrue(mock.called)" toReformat="false" toShortenFQNames="true">
    <variable name="mock" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="acw" value="$mock$.assert_called_with($expected$)" description="Mock.assert_called_with" toReformat="false" toShortenFQNames="true">
    <variable name="mock" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="expected" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ase" value="self.assertEqual($first$, $second$)" description="self.assertEqual" toReformat="false" toShortenFQNames="true">
    <variable name="first" expression="" defaultValue="&quot;first&quot;" alwaysStopAt="true" />
    <variable name="second" expression="" defaultValue="&quot;second&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asf" value="self.assertFalse($criteria$)" description="self.assertFalse" toReformat="false" toShortenFQNames="true">
    <variable name="criteria" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asha" value="self.assertFalse(hasattr($instance$, '$attribute$'))" description="self.assertTrue(hasattr(obj, 'attribute'))" toReformat="false" toShortenFQNames="true">
    <variable name="instance" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="attribute" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asi" value="self.assertIs($expected$, $item$)" description="[unittest2] self.assertIs" toReformat="false" toShortenFQNames="true">
    <variable name="expected" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asii" value="self.assertIsInstance($instance$, $type$)" description="[unittest2] self.assertIsInstance" toReformat="false" toShortenFQNames="true">
    <variable name="instance" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asne" value="self.assertNotEquals($actual$, $expected$)" description="self.assertNotEquals(actual, expected)" toReformat="false" toShortenFQNames="true">
    <variable name="actual" expression="" defaultValue="&quot;actual&quot;" alwaysStopAt="true" />
    <variable name="expected" expression="" defaultValue="&quot;expected&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asna" value="self.assertFalse(hasattr($instance$, '$attribute$'))" description="self.assertFalse(hasattr(obj, 'attribute'))" toReformat="false" toShortenFQNames="true">
    <variable name="instance" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="attribute" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asinn" value="self.assertIsNotNone($instance$)" description="self.assertIsNotNone(Item)" toReformat="false" toShortenFQNames="true">
    <variable name="instance" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asr" value="self.assertRaises($exception$, $callable$, $args_and_kwargs$)$END$" description="self.assertRaises" toReformat="false" toShortenFQNames="true">
    <variable name="exception" expression="" defaultValue="&quot;exception&quot;" alwaysStopAt="true" />
    <variable name="callable" expression="" defaultValue="&quot;callable&quot;" alwaysStopAt="true" />
    <variable name="args_and_kwargs" expression="" defaultValue="&quot;args_and_kwargs&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ast" value="self.assertTrue($criteria$)" description="self.assertTrue" toReformat="false" toShortenFQNames="true">
    <variable name="criteria" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="test" value="def test_$test$(self):&#10;    &quot;&quot;&quot;Verify `$class$.$method$`$more$.&quot;&quot;&quot;&#10;    $END$" description="Python unit test" toReformat="false" toShortenFQNames="true">
    <variable name="test" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="more" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="testclass" value="class $ClassName$Tests(unittest.TestCase):&#10;    &quot;&quot;&quot;Unit tests for `$ClassName$`.&quot;&quot;&quot;&#10;    &#10;    $END$" description="Python unit test class." toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="testmain" value="import unittest&#10;&#10;$END$&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()" description="Main method for a unit test file" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="testmain2" value="try:&#10;    from unittest2 import *&#10;except ImportError:&#10;    from unittest import *&#10;&#10;class $ClassName$Tests(TestCase):&#10;    &quot;&quot;&quot;Unit tests for $ClassName$.&quot;&quot;&quot;&#10;&#10;    $END$&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()" description="Main method for a unit test file using unittest2" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="tln" value="# -- $description$ --" description="Test separator line." toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="testmaind" value="from django.utils import unittest&#10;&#10;class $ClassName$Tests(unittest.TestCase):&#10;    &quot;&quot;&quot;Unit tests for $ClassName$.&quot;&quot;&quot;&#10;&#10;    $END$&#10;&#10;if __name__ == '__main__':&#10;    from django.test.utils import setup_test_environment&#10;    setup_test_environment()&#10;    unittest.main()" description="Main method for a unit test file using unittest2 from Django 1.3+" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asp" value="self.assertProb($target$, $sides$, $num$, $denom$)$END$" description="self.assertProb" toReformat="false" toShortenFQNames="true">
    <variable name="target" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="sides" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="num" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="denom" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="tup" value="def setUp(self):&#10;    &quot;&quot;&quot;Perform pre-test initialization before each unit test in `$class$`.&quot;&quot;&quot;&#10;    $END$" description="Test Setup self.setUp()" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="tdn" value="def tearDown(self):&#10;    &quot;&quot;&quot;Clean up after tests.&quot;&quot;&quot;&#10;    $END$" description="Test Setup self.tearDown()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="asin" value="self.assertIsNone($instance$)" description="self.asserIsNone(Item)" toReformat="false" toShortenFQNames="true">
    <variable name="instance" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>