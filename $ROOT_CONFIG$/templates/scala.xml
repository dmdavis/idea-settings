<templateSet group="scala">
  <template name="main" value="def main(args: Array[String]){&#10;  $END$&#10;}" description="Template for main method" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="opt" value="$OPTION$ match {&#10;  case Some($NAME$) =&gt; $END$&#10;  case None =&gt;&#10;}" description="Template for matching Option type" toReformat="false" toShortenFQNames="true">
    <variable name="OPTION" expression="scalaVariableOfType(&quot;scala.Option&quot;)" defaultValue="option" alwaysStopAt="true" />
    <variable name="NAME" expression="suggestScalaVariableName(&quot;option&quot;, OPTION)" defaultValue="x" alwaysStopAt="true" />
    <context />
  </template>
  <template name="itr" value="for ($NAME$ &lt;- $FOR$ $GUARD$) {&#10;  $END$&#10;  }" description="Template for scala foreach" toReformat="true" toShortenFQNames="true">
    <variable name="FOR" expression="scalaVariableOfType(&quot;foreach&quot;)" defaultValue="option" alwaysStopAt="true" />
    <variable name="NAME" expression="suggestScalaVariableName(&quot;foreach&quot;, FOR)" defaultValue="x" alwaysStopAt="true" />
    <variable name="GUARD" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="itry" value="for ($NAME$ &lt;- $FOR$ $GUARD$) yield {&#10;  $END$&#10;  }" description="Template for scala foreach" toReformat="true" toShortenFQNames="true">
    <variable name="FOR" expression="scalaVariableOfType(&quot;foreach&quot;)" defaultValue="option" alwaysStopAt="true" />
    <variable name="NAME" expression="suggestScalaVariableName(&quot;foreach&quot;, FOR)" defaultValue="x" alwaysStopAt="true" />
    <variable name="GUARD" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>