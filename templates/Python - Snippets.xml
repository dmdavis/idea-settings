<templateSet group="Python - Snippets">
  <template name="yolk" value="import xmlrpclib&#10;import pip&#10;&#10;pypi = xmlrpclib.ServerProxy('http://pypi.python.org/pypi')&#10;for dist in pip.get_installed_distributions():&#10;    available = pypi.package_releases(dist.project_name)&#10;    if not available:&#10;        # Try to capitalize pkg name&#10;        available = pypi.package_releases(dist.project_name.capitalize())&#10;&#10;    if not available:&#10;        msg = 'no releases at pypi'&#10;    elif available[0] != dist.version:&#10;        msg = '{} available'.format(available[0])&#10;    else:&#10;        msg = 'up to date'&#10;    pkg_info = '{dist.project_name} {dist.version}'.format(dist=dist)&#10;    print '{pkg_info:40} {msg}'.format(pkg_info=pkg_info, msg=msg)" description="Check PyPI for updates using pip" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="autorecon" value="import inspect&#10;from pymongo.errors import AutoReconnect&#10;&#10;def auto_reconnect(connection):&#10;    &quot;&quot;&quot;Find all methods that raise AutoReconnect and wrap them with a retry.&#10;    &#10;    :param connection: A MongoDB connection to wrap&#10;    :type connection: pymongo.connection.Connection&#10;    &#10;    &gt;&gt;&gt; conn = pymongo.connection.Connection()&#10;    &gt;&gt;&gt; auto_reconnect(conn)&#10;    &quot;&quot;&quot;&#10;    def reconnect(f):&#10;        def f_retry(*args, **kwargs):&#10;            try:&#10;                return f(*args, **kwargs)&#10;            except AutoReconnect:&#10;                # attempt a single reconnect&#10;                return f(*args, **kwargs)&#10;        return f_retry&#10;    for name, method in inspect.getmembers(connection, inspect.ismethod):&#10;        if not name.startswith('__'):&#10;            source = inspect.getsource(method)&#10;            if source and 'raise AutoReconnect' in source:&#10;                setattr(connection, name, reconnect(method))&#10;" description="PyMongo auto_reconnect snippet" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="yamob" value="class $classname$(yaml.YAMLObject):&#10;    &quot;&quot;&quot;`$classname$` $description$.&quot;&quot;&quot;&#10;&#10;    yaml_tag = &quot;!$tagname$&quot;&#10;&#10;    #noinspection PyUnresolvedReferences&#10;    def __init__(self$args$):&#10;        &quot;&quot;&quot;Initialize a new `$classname$` instance.&quot;&quot;&quot;&#10;        pass&#10;&#10;    def __eq__(self, other):&#10;        &quot;&quot;&quot;`$classname$` equality operator.&quot;&quot;&quot;&#10;        if other and isinstance(other, $classname$):&#10;            return True&#10;        return False&#10;&#10;    def __ne__(self, other):&#10;        &quot;&quot;&quot;`$classname$` inequality operator.&quot;&quot;&quot;&#10;        return not self.__eq__(other)&#10;&#10;    def __repr__(self):&#10;        &quot;&quot;&quot;Returns a string representation of this `$classname$` instance&#10;        that could be evaluated to create an identical instance.&#10;        &quot;&quot;&quot;&#10;        return &quot;%s(name=%r)&quot; % (&#10;            self.__class__.__name__, self.name)&#10;&#10;    def __str__(self):&#10;        &quot;&quot;&quot;Returns a human-readable text representation of this `$classname$`&#10;        instance.&quot;&quot;&quot;&#10;        return yaml.dump(self, default_flow_style=False)&#10; " description="yaml.YAMLObject boilerplate class" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="tagname" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="gp" value="def $get_path$($filename$):&#10;    folder = os.path.dirname(__file__)&#10;    return os.path.join(folder, filename)&#10;" description="Get the path to a file in the same directory as the current Python file" toReformat="true" toShortenFQNames="true">
    <variable name="get_path" expression="" defaultValue="&quot;get_path&quot;" alwaysStopAt="true" />
    <variable name="filename" expression="" defaultValue="&quot;filename&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="setup" value="#!/usr/bin/env python&#10;# encoding: utf-8&#10;&quot;&quot;&quot;&#10;setup.py&#10;&#10;$file_description$&#10;&#10;Copyright (c) 2013 $copyright_holder$. All rights reserved.&#10;&quot;&quot;&quot;&#10;from setuptools import setup, find_packages&#10;&#10;setup(&#10;    name='$package$',&#10;    version='0.0.1',&#10;    description='$description$',&#10;    long_description=&quot;$long_description$&quot;,&#10;    packages=find_packages(exclude=['*.tests']),&#10;    install_requires=['Foobar &gt;= 0.1'],&#10;    entry_points={&#10;        'console_scripts':[&#10;            'my_exe = $package$.file:main',&#10;         ]&#10;    }&#10;)&#10;" description="Setup.py boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="file_description" expression="" defaultValue="&quot;file_description&quot;" alwaysStopAt="true" />
    <variable name="copyright_holder" expression="" defaultValue="&quot;Dale Davis&quot;" alwaysStopAt="true" />
    <variable name="package" expression="" defaultValue="&quot;package&quot;" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="&quot;package description&quot;" alwaysStopAt="true" />
    <variable name="long_description" expression="" defaultValue="&quot;long description&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hrtd" value="from collections import namedtuple&#10;human_delta = namedtuple('human_delta',&#10;                         ['days', 'hours', 'minutes', 'seconds'])&#10;human_delta.__str__ = lambda self: \&#10;    '%d days, %d hours, %d minutes, %d seconds' % \&#10;    (self.days, self.hours, self.minutes, self.seconds)&#10;&#10;&#10;def convert_timedelta(duration):&#10;    days, seconds = duration.days, duration.seconds&#10;    hours = seconds // 3600&#10;    minutes = (seconds % 3600) // 60&#10;    seconds = (seconds % 60)&#10;    return human_delta(days, hours, minutes, seconds)" description="Human-readable time delta" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ipdb" value="from IPython.core.debugger import Tracer; debug_here = Tracer(); debug_here()$END$" description="Insert an ipdb.set_trace() statement [iPython Debugger]" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ppdb" value="import pydevd&#10;pydevd.settrace('$ip_host$', port=$port$,&#10;                stdoutToServer=True, stderrToServer=True)$END$" description="Insert a pydevd.set_trace() statement [PyCharm Remote Debugging]" toReformat="false" toShortenFQNames="true">
    <variable name="ip_host" expression="" defaultValue="&quot;10.1.3.94&quot;" alwaysStopAt="true" />
    <variable name="port" expression="" defaultValue="&quot;23532&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>