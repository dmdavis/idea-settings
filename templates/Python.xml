<templateSet group="Python">
  <template name="class" value="class $ClassName$($object$):&#10;    &quot;&quot;&quot;$Description$&quot;&quot;&quot;&#10;&#10;    $END$" description="Python class." toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="object" expression="complete()" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="Description" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="init" value="def __init__(self$args$):&#10;    &quot;&quot;&quot;Initialize a new `$class$` instance.&quot;&quot;&quot;&#10;    $END$" description="Python class initializer." toReformat="false" toShortenFQNames="true">
    <variable name="args" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="cdef" value="def $method$(self$args$):&#10;    &quot;&quot;&quot;$doc_comments$&quot;&quot;&quot;&#10;    $END$" description="Python class method." toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="doc_comments" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ards" value=":param $param_name$: $description$&#10;:type $param_name$: $param_type$" description="Method argument documentation (sphinx)" toReformat="false" toShortenFQNames="true">
    <variable name="param_name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param_type" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="def" value="def $method$($args$):&#10;    &quot;&quot;&quot;$doc_comments$&quot;&quot;&quot;&#10;    $END$" description="Python method." toReformat="true" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="doc_comments" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ifmain" value="if __name__ == '__main__':&#10;    $END$" description="if __name__ = __main__" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="todo" value="# TODO: $END$" description="TODO item" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="argsd" value="Arguments:&#10;- `$arg$`: $END$" description="Method argument documentation block" toReformat="false" toShortenFQNames="true">
    <variable name="arg" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="hdr" value="#!/usr/bin/env python&#10;# encoding: utf-8&#10;&quot;&quot;&quot;&#10;$filename$&#10;&#10;$description$&#10;&#10;Copyright (c) 2015 $copyright_holder$. All rights reserved.&#10;&quot;&quot;&quot;&#10;&#10;$END$" description="Python file header." toReformat="false" toShortenFQNames="true">
    <variable name="filename" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="copyright_holder" expression="" defaultValue="&quot;Dale Davis&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="from" value="from $package$ import $class$" description="from/import statement" toReformat="false" toShortenFQNames="true">
    <variable name="package" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="main" value="import sys&#10;&#10;&#10;def main():  # pragma: no cover&#10;    &quot;&quot;&quot;&#10;    Main method for $description$&#10;&#10;    &quot;&quot;&quot;&#10;    return 0$END$&#10;&#10;if __name__ == '__main__':  # pragma: no cover&#10;    sys.exit(main())" description="Main method and function" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <context />
  </template>
  <template name="dc" value="&quot;&quot;&quot;$END$&quot;&quot;&quot;" description="Triple-quoted doc comment string" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="pse" value="print &gt;&gt; sys.stderr, '$END$'" description="Print to sys.stderr" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="all" value="__all__ = ['$END$']" description="__all__ declaration" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="bug" value="# BUG: $END$" description="BUG item" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="ver" value="__version_info__ = ($version$)&#10;__version__ = '.'.join([str(v) for v in __version_info__])&#10;$END$" description="Version and version info declaration" toReformat="false" toShortenFQNames="true">
    <variable name="version" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="hdra" value="#!/usr/bin/env python&#10;# encoding: utf-8&#10;&quot;&quot;&quot;&#10;$filename$.py&#10;&#10;$description$&#10;&#10;Copyright (c) 2015 $copyright_holder$.&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use&#10;this file except in compliance with the License. You may obtain a copy of the&#10;License at&#10;&#10;    http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software distributed&#10;under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR&#10;CONDITIONS OF ANY KIND, either express or implied. See the License for the&#10;specific language governing permissions and limitations under the License.&#10;&quot;&quot;&quot;&#10;&#10;$END$" description="Python file header with Apache 2.0 license." toReformat="false" toShortenFQNames="true">
    <variable name="filename" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="copyright_holder" expression="" defaultValue="Demand Media" alwaysStopAt="true" />
    <context />
  </template>
  <template name="new" value="def __new__(cls, *args, **kwargs):&#10;    &quot;&quot;&quot;Create a new `$class$` instance.&quot;&quot;&quot;&#10;    $END$" description="Python class constructor." toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="prop" value="@property&#10;def $method$(self):&#10;    &quot;&quot;&quot;$doc_comments$&quot;&quot;&quot;&#10;    $END$" description="A read-only property" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="doc_comments" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="link" value="`$description$ &lt;$url$&gt;`_" description="External link (sphinx)" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="description" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="url" alwaysStopAt="true" />
    <context />
  </template>
  <template name="sup" value="super($class$, self).$override$($END$)" description="Call to super-class" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <variable name="override" expression="" defaultValue="&quot;__init__&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="nspold" value="from pkgutil import extend_path&#10;&#10;__base_path__ = __path__&#10;__path__ = extend_path(__path__, __name__)$END$" description="__init__.py for a parent name space package (old style)" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="mprop" value="@memoized_property&#10;def $method$(self):&#10;    &quot;&quot;&quot;$doc_comments$&quot;&quot;&quot;&#10;    $END$" description="A memoized read-only property" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="doc_comments" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="author" value="__author__ = &quot;$author$&quot;&#10;__copyright__ = &quot;Copyright (c) $year$ $author$. All rights reserved.&quot;&#10;__credits__ = [&quot;$author$&quot;, ]&#10;__license__ = &quot;$license$&quot;&#10;__version_info__ = ($major$, $minor$)&#10;__version__ = '.'.join([str(v) for v in __version_info__])&#10;__maintainer__ = &quot;$author$&quot;&#10;__email__ = &quot;$email$&quot;&#10;__status__ = &quot;$status$&quot;&#10;$END$" description="Python authorship section" toReformat="false" toShortenFQNames="true">
    <variable name="author" expression="" defaultValue="&quot;Dale Davis&quot;" alwaysStopAt="true" />
    <variable name="year" expression="" defaultValue="&quot;2012&quot;" alwaysStopAt="true" />
    <variable name="license" expression="" defaultValue="&quot;BSD-2-Clause&quot;" alwaysStopAt="true" />
    <variable name="major" expression="" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="minor" expression="" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="email" expression="" defaultValue="&quot;dale@dmdavis.net&quot;" alwaysStopAt="true" />
    <variable name="status" expression="" defaultValue="&quot;Development&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="eq" value="def __eq__(self, other):&#10;    &quot;&quot;&quot;Equality operator.&quot;&quot;&quot;&#10;    if isinstance(other, $class$):&#10;        return self.$field$ == other.$field$&#10;    return NotImplemented&#10;&#10;def __ne__(self, other):&#10;    &quot;&quot;&quot;Inequality operator.&quot;&quot;&quot;&#10;    result = self.__eq__(other)&#10;    if result is NotImplemented:&#10;        return result&#10;    return not result" description="Equality overrides" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="field" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="dv" value="$field$ = $dict$['$field$']$END$" description="Dict value to variable" toReformat="false" toShortenFQNames="true">
    <variable name="dict" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="field" expression="" defaultValue="&quot;field&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="param" value=":param $param$: $description$&#10;$END$" description="ReST :param:" toReformat="false" toShortenFQNames="true">
    <variable name="param" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="lat" value="t.add_type($roll$, '$name$', cost=$cost$)" description="Loot add_type" toReformat="false" toShortenFQNames="true">
    <variable name="roll" expression="" defaultValue="&quot;roll&quot;" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="cost" expression="" defaultValue="&quot;cost&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="nsp" value="__import__('pkg_resources').declare_namespace(__name__)" description="__init__.py for a parent name space package" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="super" value="super($class$, self).$method$($end$)" description="Generates a 'super' call" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="pyClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="pyFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="hdrb2" value="#!/usr/bin/env python&#10;# encoding: utf-8&#10;&quot;&quot;&quot;&#10;$filename$.py&#10;&#10;$description$&#10;&#10;Copyright (c) $year$ $copyright_holder$. All rights reserved.&#10;&#10;Redistribution and use in source and binary forms, with or without&#10;modification, are permitted provided that the following conditions are met:&#10;&#10;* Redistributions of source code must retain the above copyright notice, this&#10;  list of conditions and the following disclaimer.&#10;* Redistributions in binary form must reproduce the above copyright notice,&#10;  this list of conditions and the following disclaimer in the documentation&#10;  and/or other materials provided with the distribution.&#10;&#10;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND&#10;ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED&#10;WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#10;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE&#10;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&#10;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER&#10;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#10;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#10;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&quot;&quot;&quot;&#10;&#10;$END$" description="Python file header with BSD 2-Clause license." toReformat="false" toShortenFQNames="true">
    <variable name="filename" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="year" expression="" defaultValue="&quot;2015&quot;" alwaysStopAt="true" />
    <variable name="copyright_holder" expression="" defaultValue="&quot;Dale Davis&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="kv" value="'$key$': $value$,$END$" description="Key/value for dict" toReformat="false" toShortenFQNames="true">
    <variable name="key" expression="" defaultValue="&quot;key&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rpt" value=":param $param$: $description$&#10;:type $param$: $type$&#10;$END$" description="ReST :param: and :type:" toReformat="true" toShortenFQNames="true">
    <variable name="param" expression="complete()" defaultValue="&quot;param&quot;" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="&quot;description&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;type&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rpr" value="def __repr__(self):&#10;    return '&lt;%s $idarg$&gt;' % ($cvalue$, self.$field$)$END$" description="__repr__() method" toReformat="false" toShortenFQNames="true">
    <variable name="idarg" expression="" defaultValue="&quot;%s&quot;" alwaysStopAt="true" />
    <variable name="cvalue" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <variable name="field" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>